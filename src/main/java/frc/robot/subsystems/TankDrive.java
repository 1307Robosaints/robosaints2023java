// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.Joystick;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.revrobotics.CANSparkMax;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMaxLowLevel.MotorType;


/**
 *
 */
public class TankDrive extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax driveMotorLeft;
private CANSparkMax driveMotorRight;
private CANSparkMax followMotorLeft;
private CANSparkMax followMotorRight;
private DifferentialDrive differentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public TankDrive() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
driveMotorLeft = new CANSparkMax(2, MotorType.kBrushless);
SmartDashboard.putNumber("DriveMotorLeft",driveMotorLeft.get());
 driveMotorLeft.setInverted(false);

driveMotorRight = new CANSparkMax(1, MotorType.kBrushless);
SmartDashboard.putNumber("DriveMotorRight",driveMotorRight.get());
driveMotorRight.setInverted(false);

 followMotorRight = new CANSparkMax(3, MotorType.kBrushless);
 followMotorLeft = new CANSparkMax(4, MotorType.kBrushless);
 followMotorLeft.follow(driveMotorLeft);
 followMotorRight.follow(driveMotorRight);
differentialDrive = new DifferentialDrive(driveMotorLeft, driveMotorRight);
 //addChild("Differential Drive 1",differentialDrive);
 differentialDrive.setSafetyEnabled(true);
differentialDrive.setExpiration(0.1);
differentialDrive.setMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }
    public void StandardDrive(Joystick driveJoystick) {
        double maxSpeed = ((driveJoystick.getRawAxis(3)*-1)+1
        )*0.5;
        double fwd = driveJoystick.getX()*maxSpeed;
        double rot = driveJoystick.getY()*maxSpeed;
        differentialDrive.arcadeDrive(fwd, rot);
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

