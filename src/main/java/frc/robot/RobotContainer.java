// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final SwerveDrive m_swerveDrive = new SwerveDrive();
    public final TankDrive m_tankDrive = new TankDrive();
    public final GrabberExtension m_grabberExtension = new GrabberExtension();
    public final PneumaticGrabber m_pneumaticGrabber = new PneumaticGrabber();
    public final PneumaticArm m_pneumaticArm = new PneumaticArm();
    public final Elevator m_elevator = new Elevator();

// Joysticks
private final Joystick joystick1 = new Joystick(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    SmartDashboard.putData("VisionAuto", new VisionAuto());
    //SmartDashboard.putData("Drive", new Drive());
    SmartDashboard.putData("ElevatorUp", new ElevatorUp(m_elevator));
    SmartDashboard.putData("ElevatorDown", new ElevatorDown(m_elevator));
    SmartDashboard.putData("ArmUp", new ArmUp(m_pneumaticArm));
    SmartDashboard.putData("ArmDown", new ArmDown(m_pneumaticArm));
    SmartDashboard.putData("GrabberGrab", new GrabberGrab(m_pneumaticGrabber));
    SmartDashboard.putData("GrabberExtend", new GrabberExtend(m_grabberExtension));
    SmartDashboard.putData("GrabberRetract", new GrabberRetract());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_tankDrive.setDefaultCommand(new Drive(0, m_tankDrive));


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

  //  m_chooser.setDefaultOption("$command.getName()", new ${name.replace(' ', '')}( m_${name.substring(0,1).toLowerCase()}${name.substring(1).replace(' ', '')} ));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton joystickButton6 = new JoystickButton(joystick1, 6);        
joystickButton6.whileTrue(new ArmDown(m_pneumaticArm).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton elevatorDownButton = new JoystickButton(joystick1, 5);        
elevatorDownButton.whileTrue(new ElevatorDown(m_elevator).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton armOutButton = new JoystickButton(joystick1, 4);        
armOutButton.whileTrue(new ArmUp(m_pneumaticArm).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton elevatorUpButton = new JoystickButton(joystick1, 3);        
elevatorUpButton.whileTrue(new ElevatorUp(m_elevator).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton extendButton = new JoystickButton(joystick1, 2);        
extendButton.toggleOnTrue(new GrabberExtend(m_grabberExtension).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton grabButton = new JoystickButton(joystick1, 1);        
grabButton.whileTrue(new GrabberGrab(m_pneumaticGrabber).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public Joystick getJoystick1() {
        return joystick1;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

